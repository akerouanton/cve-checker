package debian

import (
    "net/http"
    "time"
    "io/ioutil"
    "encoding/json"
    _ "github.com/NiR-/cve-checker/sources"
    "github.com/NiR-/cve-checker/datastore"
)

const feedUrl = "http://security-tracker.debian.org/tracker/data/json"

type jsonFile map[string]map[string]issue

type issue struct {
    Description string          `json:"description"`
    Releases map[string]release `json:"releases"`
}

type release struct {
    Status       string            `json:"status"`
    Repositories map[string]string `json:"repositories"`
    FixedVersion string            `json:"fixed_version"`
    Urgency      string            `json:"urgency"`
}

type DebianSource struct {}

/* func init() {
    sources.RegisterSource("debian", DebianSource{})
} */

func (DebianSource) Update(store datastore.Store) error {
    client := &http.Client{
        Timeout: 60 * time.Second,
    }

    print("Fetching Debian feed... ")
    resp, err := client.Get(feedUrl)
    if err != nil {
        return err
    }

    defer resp.Body.Close()

    respBody, err:= ioutil.ReadAll(resp.Body)
    println("DONE")

    if err != nil {
        return err
    }

    print("Unmarshalling response body... ")
    var issues jsonFile
    if err := json.Unmarshal(respBody, &issues); err != nil {
        return err
    }
    println("DONE")

    return nil
}

func (DebianSource) Cleanup() {
}
