package debian

import (
    "net/http"
    "time"
    "io/ioutil"
    "encoding/json"
    _ "github.com/NiR-/cve-checker/sources"
    "github.com/NiR-/cve-checker/datastore"
    "github.com/NiR-/cve-checker/sources"
    "github.com/NiR-/cve-checker/distro"
)

const feedUrl = "http://security-tracker.debian.org/tracker/data/json"

type jsonFile map[string]map[string]issue

type issue struct {
    Description string          `json:"description"`
    Releases map[string]release `json:"releases"`
}

type release struct {
    Status       string            `json:"status"`
    Repositories map[string]string `json:"repositories"`
    FixedVersion string            `json:"fixed_version"`
    Urgency      string            `json:"urgency"`
}

type DebianSource struct {}

func init() {
    sources.RegisterSource("debian", DebianSource{})
}

func (DebianSource) Enabled(d distro.Distribution) (bool) {
    return false
    // return d.Name == "Debian"
}

func (DebianSource) Update(store datastore.Store, d distro.Distribution) error {
    // Just don't run this source if the current distro isn't Debian
    if d.Name != "Debian" {
        return nil
    }

    client := &http.Client{
        Timeout: 60 * time.Second,
    }

    resp, err := client.Get(feedUrl)
    if err != nil {
        return err
    }

    defer resp.Body.Close()

    respBody, err:= ioutil.ReadAll(resp.Body)

    if err != nil {
        return err
    }

    var issues jsonFile
    if err := json.Unmarshal(respBody, &issues); err != nil {
        return err
    }

    return nil
}

func (DebianSource) Cleanup() {
}
