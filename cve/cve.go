package cve

import (
    "errors"

    "github.com/NiR-/cve-checker/pkg"
    "github.com/NiR-/cve-checker/pkgmgr"
)

type Severity string

const (
    UnknownSeverity    Severity = "unknown"
    NegligibleSeverity Severity = "negligible"
    LowSeverity        Severity = "low"
    MediumSeverity     Severity = "medium"
    HighSeverity       Severity = "high"
    CriticalSeverity   Severity = "critical"
)

type CVE struct {
    Id               string
    Description      string
    Severity         Severity
    AffectedPackages []pkg.AffectedPackage
}

func (cve CVE) DoesItAffect(p pkg.Package) (bool) {
    for _, affected := range cve.AffectedPackages {
        if affected.Name != p.Name {
            continue
        }

        if patched, err := isPackageNewerOrSameThan(p, affected); err == nil {
            return !patched
        }
    }

    return false
}

func isPackageNewerOrSameThan(p pkg.Package, patched pkg.AffectedPackage) (r bool, err error) {
    if p.Pkgmgr != patched.Pkgmgr {
        return false, errors.New("Package version can't be compared: both package are not managed by same package manager.")
    }

    var pkgDriver pkgmgr.Driver
    if pkgDriver, err = pkgmgr.GetDriver(p.Pkgmgr); err != nil {
        return false, err
    }

    var diff int8
    if diff, err = pkgDriver.CompareVersion(p.Version, patched.PatchedVersion); err != nil {
        return false, err
    }

    if diff == pkgmgr.LeftVersionIsNewer || diff == pkgmgr.VersionEqual {
        return true, nil
    }

    return false, nil
}
