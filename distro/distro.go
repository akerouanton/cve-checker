package distro

import (
    "os"
    "errors"
    "io/ioutil"
    "bytes"
)

var (
    ErrDistroNotSupported = errors.New("distribution not supported")
)

type Distribution struct {
    Name    string
    Version string
}

func InferDistro() (distro Distribution, err error) {
    if _, err := os.Stat("/etc/lsb-release"); err == nil {
        return readLsbRelease()
    }

    return distro, ErrDistroNotSupported
}

func readLsbRelease() (distro Distribution, err error) {
    lsbRelease, err := ioutil.ReadFile("/etc/lsb-release")
    if err != nil {
        return distro, err
    }

    lines := bytes.Split(lsbRelease, []byte("\n"))

    DISTRIB_ID := []byte("DISTRIB_ID=")
    DISTRIB_CODENAME := []byte("DISTRIB_CODENAME=")

    var name, version string

    for _, line := range lines {
        if bytes.HasPrefix(line, DISTRIB_ID) {
            name = string(bytes.TrimPrefix(line, DISTRIB_ID))
        }
        if bytes.HasPrefix(line, DISTRIB_CODENAME) {
            version = string(bytes.TrimPrefix(line, DISTRIB_CODENAME))
        }
    }

    distro = Distribution{name, version}

    return distro, nil
}
