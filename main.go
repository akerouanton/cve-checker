package main

import (
	"os"
    "fmt"

    "github.com/NiR-/cve-checker/distribution"

    // Sources
    "github.com/NiR-/cve-checker/sources"
    _ "github.com/NiR-/cve-checker/sources/ubuntu"
    _ "github.com/NiR-/cve-checker/sources/debian"

    // Data stores
    "github.com/NiR-/cve-checker/datastore"
    "github.com/NiR-/cve-checker/datastore/in_memory"

    // Packages managers
    "github.com/NiR-/cve-checker/pkgmgr"
    _ "github.com/NiR-/cve-checker/pkgmgr/dpkg"
)

/**
 * @TODO: Add support for circl.lu feed
 */
func main() {
	distro, err := distribution.InferDistro()
	if err != nil {
		print(err)
		os.Exit(1)
	}

    println(fmt.Sprintf("Infered distro: %s (%s)", distro.Name, distro.Version))
    println(fmt.Sprintf("%d sources found.", len(sources.Sources())))

    db, err := datastore.Use(in_memory.StoreName)
    if err != nil {
        panic(err)
    }

    for name, source := range sources.Sources() {
        if err := source.Update(db, distro); err != nil {
            println(fmt.Sprintf("%s source failed to update due to: %s.", name, err))
        }
    }

    println(fmt.Sprintf("%d vulnerabilities fetched from sources.", db.CountVulns()))

    localPkgs, err:= pkgmgr.LocalPackages(distro)
    if err != nil {
        panic(err)
    }

    println(fmt.Sprintf("%d installed packages.", len(localPkgs)))

    vulnCount := 0

    for _, pkg := range localPkgs {
        vulns := db.ListVulnsForPackage(pkg)

        if len(vulns) == 0 {
            continue
        }

        vulnCount += len(vulns)

        println()
        println(fmt.Sprintf("[%s] %d vulnerabilities found:", pkg.Name, len(vulns)))

        for _, cve := range vulns {
            println(fmt.Sprintf("\r- %s: %s", cve.Id, cve.Description))
        }
    }

    if vulnCount == 0 {
        println("No vulnerable package found.")
    }
}
