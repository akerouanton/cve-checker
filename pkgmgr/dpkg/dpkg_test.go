package dpkg

import (
    "testing"
    "unicode/utf8"
    "github.com/NiR-/cve-checker/pkgmgr"
)

func TestNormalizeVersionWithEpochUpstreamDebianVersionSections(t *testing.T) {
    d := dpkg{}

    normalized, err := d.normalizeVersion("3:1.9~foo+precise-bar:baz-debian~9")
    if err != nil {
        t.Fatal(err)
    }

    if normalized.Epoch != 3 {
        t.Fatal("Epoch version does not match.")
    }
    if normalized.Upstream != "1.9~foo+precise-bar:baz" {
        t.Fatal("Upstream version does not match.")
    }
    if normalized.Debian != "debian~9" {
        t.Fatal("Debian version does not match.")
    }
}

func TestNormalizeVersionWithEpochUpstreamVersionSections(t *testing.T) {
    d := dpkg{}

    normalized, err := d.normalizeVersion("3:1.9~foo+precise:baz")
    if err != nil {
        t.Fatal(err)
    }

    if normalized.Epoch != 3 {
        t.Fatal("Epoch version does not match.")
    }
    if normalized.Upstream != "1.9~foo+precise:baz" {
        t.Fatal("Upstream version does not match.")
    }
    if normalized.Debian != "0" {
        t.Fatal("Debian version does not match.")
    }
}

func TestNormalizeVersionWithUpstreamDebianVersionSections(t *testing.T) {
    d := dpkg{}

    normalized, err := d.normalizeVersion("1.9~foo+precise-bar-debian~9")
    if err != nil {
        t.Fatal(err)
    }

    if normalized.Epoch != 0 {
        t.Fatal("Epoch version does not match.")
    }
    if normalized.Upstream != "1.9~foo+precise-bar" {
        t.Fatal("Upstream version does not match.")
    }
    if normalized.Debian != "debian~9" {
        t.Fatal("Debian version does not match.")
    }
}

func TestNormalizeVersionWithUpstreamVersionSections(t *testing.T) {
    d := dpkg{}

    normalized, err := d.normalizeVersion("1.9~foo+precise")
    if err != nil {
        t.Fatal(err)
    }

    if normalized.Epoch != 0 {
        t.Fatal("Epoch version does not match.")
    }
    if normalized.Upstream != "1.9~foo+precise" {
        t.Fatal("Upstream version does not match.")
    }
    if normalized.Debian != "0" {
        t.Fatal("Debian version does not match.")
    }
}

func TestCompareVersion(t *testing.T) {
    d := dpkg{}

    if c, _ := d.CompareVersion("1:1.9~foo+precise-bar", "1.9~foo+precise-bar"); c != pkgmgr.LeftVersionIsNewer {
        t.Fatal("Failed to assert \"1:1.9~foo+precise-bar\" is newer than \"1.9~foo+precise-bar\".")
    }

    if c, _ := d.CompareVersion("1.9~foo+precise~1-bar", "1.9~foo+precise-bar"); c != pkgmgr.RightVersionIsNewer {
        t.Fatal("Failed to assert \"1.9~foo+precise-bar\" is newer than \"1.9~foo+precise~1-bar\".")
    }

    if c, _ := d.CompareVersion("1.9-bar", "1.9-bar1"); c != pkgmgr.RightVersionIsNewer {
        t.Fatal("Failed to assert \"1.9-bar1\" is newer than \"1.9-bar\".")
    }
}

func TestCompareStringFragment(t *testing.T) {
    if compareStringFragment("~~", "~~a") != pkgmgr.RightVersionIsNewer {
        t.Fatal("Failed to assert \"~~\" is earlier than \"~~a\".")
    }

    if compareStringFragment("~~a", "~") != pkgmgr.RightVersionIsNewer {
        t.Fatal("Failed to assert \"~~a\" is earlier than \"~\".")
    }

    if compareStringFragment("~", "a") != pkgmgr.RightVersionIsNewer {
        t.Fatal("Failed to assert \"~\" is earlier than \"a\".")
    }
}

func TestWeightChar(t *testing.T) {
    if weightChar('9') != 0 {
        t.Fatal("Failed to assert \"9\" weight is 0.")
    }

    if weightChar('a') != 97 {
        t.Fatal("Failed to assert \"a\" weight is 97 (its ASCII code).")
    }

    if weightChar('A') != 65 {
        t.Fatal("Failed to assert \"a\" weight is 97 (its ASCII code).")
    }

    if weightChar('~') != -1 {
        t.Fatal("Failed to assert \"~\" weight is -1.")
    }

    if weightChar(utf8.RuneError) != 0 {
        t.Fatal("Failed to assert a RuneError weight is 0.")
    }

    if weightChar('-') != 301 {
        t.Fatal("Failed to assert \"-\" weight is 301 (256 + 45, its ASCII code).")
    }
}
