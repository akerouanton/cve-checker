package dpkg

import (
    "bufio"
    "os"
    "strings"
    "fmt"

    "github.com/NiR-/cve-checker/cve"
    "github.com/NiR-/cve-checker/pkgmgr"
    "github.com/NiR-/cve-checker/distribution"
)

type dpkg struct{}

func init() {
    pkgmgr.Register("dpkg", dpkg{})
}

func (d dpkg) InstalledPackages(distro distribution.Distribution) (packages []cve.Package, err error) {
    if distro.Name != "Ubuntu" && distro.Name != "Debian" {
        return nil, pkgmgr.ErrDistroNotSupported
    }

    file, err := os.Open("/var/lib/dpkg/status")
    if err != nil {
        return nil, err
    }

    defer file.Close()
    scanner := bufio.NewScanner(file)

    var pkgName, pkgVersion string
    packages = []cve.Package{}

    for scanner.Scan() {
        line := strings.TrimSpace(scanner.Text())

        if strings.HasPrefix(line, "Package:") {
            pkgName = strings.TrimSpace(strings.TrimPrefix(line, "Package:"))
            continue
        }

        if strings.HasPrefix(line, "Status:") {
            status := strings.TrimSpace(strings.TrimPrefix(line, "Status:"))

            if status != "install ok installed" {
                pkgName = ""
            }
        }

        if strings.HasPrefix(line, "Version:") {
            pkgVersion = strings.TrimSpace(strings.TrimPrefix(line, "Version:"))
        }

        if pkgName != "" && pkgVersion != "" {
            packages = append(packages, cve.Package{
                Name:    pkgName,
                Version: pkgVersion,
            })

            pkgName = ""
            pkgVersion = ""

            continue
        }

        if len(line) == 0 {
            if pkgName != "" && pkgVersion == "" {
                panic(fmt.Sprintf("No version found for package %s", pkgName))
            }
            pkgName = ""
            pkgVersion = ""
        }
    }

    return packages, nil
}
