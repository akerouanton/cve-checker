package pkgmgr

import (
    "errors"

    "github.com/NiR-/cve-checker/pkg"
    "github.com/NiR-/cve-checker/distro"
)

var (
    drivers = make(map[string]Driver)

    VersionEqual        int8 = 0
    LeftVersionIsNewer  int8 = -1
    RightVersionIsNewer int8 = 1

    ErrDistroNotSupported = errors.New("distro not supported")
    ErrDriverNotFound     = errors.New("driver not supported")
)

type Driver interface {
    InstalledPackages(distro distro.Distribution) ([]pkg.Package, error)
    CompareVersion(left string, right string) (int8, error)
}

func Register(name string, driver Driver) {
    drivers[name] = driver
}

func GetDriver(name string) (d Driver, err error) {
    if _, ok := drivers[name]; !ok {
        err = ErrDriverNotFound
        return d, err
    }

    return drivers[name], err
}

func ListLocalPackages(distro distro.Distribution) (localPkgs []pkg.Package, err error) {
    for _, driver := range drivers {
        pkgs, err := driver.InstalledPackages(distro)

        if err != nil && err != ErrDistroNotSupported {
            return nil, err
        }

        if pkgs != nil {
            return pkgs, nil
        }
    }

    return nil, ErrDistroNotSupported
}
