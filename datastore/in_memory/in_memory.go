package in_memory

import (
    "github.com/NiR-/cve-checker/cve"
    "github.com/NiR-/cve-checker/datastore"
)

const (
    StoreName = "in_memory"
)

type InMemory struct {
    vulns    map[string]cve.CVE
    packages map[string][]string
}

func init() {
    datastore.Register(StoreName, func() datastore.Store {
        return &InMemory{
            vulns:    map[string]cve.CVE{},
            packages: map[string][]string{},
        }
    })
}

func (db *InMemory) StoreVulns(vulns ...cve.CVE) error {
    for _, vuln := range vulns {
        db.vulns[vuln.Id] = vuln

        for _, pkg := range vuln.AffectedPackages {
            db.packages[pkg.Name] = append(db.packages[pkg.Name], vuln.Id)
        }
    }

    return nil
}

func (db *InMemory) CountVulns() int {
    return len(db.vulns)
}

func (db *InMemory) ListVulnsForPackage(pkg cve.Package) (vulns []cve.CVE) {
    ids, exists := db.packages[pkg.Name]

    if !exists {
        return nil
    }

    for _, id := range ids {
        vuln := db.vulns[id]

        if vuln.DoesItAffect(pkg) {
            vulns = append(vulns, vuln)
        }
    }

    return vulns
}
